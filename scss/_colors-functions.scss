
// region //////////////////////////////////////////////// Getters

@function _identify-color-map($map) {
  @if $map == $theme-colors {
    @return "theme-color";
  } @else if $map == $colors {
    @return "color";
  } @else if $map == $grays {
    @return "gray";
  }

  @return null;
}

@function _get-color-if($map, $color-name) {
  // Check to make sure a color value wasn't provided.
  @if type-of($color-name) == color {
    $type: _identify-color-map($map);
    @if $type != null {
      @warn "The color name provided to `#{$type}()` was a color, not a string!";
    } @else {
      @warn "The color name provided to this function was a color, not a string!";
    }

    @return $color-name;
  }

  // Force Quotes to Match Map
  $color-name: quote($color-name);

  // Get Key if Map Has Key
  @if map-has_key($map,$color-name) {
    @return map-get($map,$color-name);
  } @else {
    $type: _identify-color-map($map);
    @error "The color `#{$color-name}` is not available in the `$#{$type}s` map.";
  }
}

@function color($color) {
  @return _get-color-if($colors,$color);
}

@function theme-color($color) {
  @return _get-color-if($theme-colors, $color);
}

@function gray($value) {
  @return _get-color-if($grays,$value);
}

// endregion ///////////////////////////////////////////// End Getters

// region //////////////////////////////////////////////// Mergers

@function color-map-merge($existing,$new: ()) {
  @return map-merge($existing,$new);
}

@function theme-colors-merge($new: ()) {
  @if not(variable-exists(theme-colors)) {
    $theme-colors: () !global;
  }

  @return color-map-merge($theme-colors, $new);
}

@function colors-merge($new: ()) {
  @if not(variable-exists(colors)) {
    $colors: () !global;
  }

  @return color-map-merge($colors, $new);
}

@function grays-merge($new: ()) {
  @if not(variable-exists(grays)) {
    $grays: () !global;
  }

  @return color-map-merge($grays, $new);
}

// endregion ///////////////////////////////////////////// End Mergers

// region //////////////////////////////////////////////// Setters

@function _set-map-color($map,$name,$color) {
  // Force Quotes to Match Map
  $name: quote($name);
  // Remove Existing Key
  @if map-has-key($map,$name) {
    $map: map-remove($map,$name);
  }

  @return color-map-merge($map,($name: $color));
}

@mixin set-theme-color($name,$color) {
  @if variable-exists(theme-colors) {
    $theme-colors: _set-map-color($theme-colors, $name,$color) !global;
  } @else {
    @error "You may not use the `set-theme-color` mixin before setting the $theme-colors map.  For best results, `@include 'colors'` to avoid order of operations issues.";
  }
}

@mixin set-color($name,$color) {
  @if variable-exists(colors) {
    $colors: _set-map-color($colors,$name,$color) !global;
  } @else {
    @error "You may not use the `set-color` mixin before setting the $colors map.  For best results, `@include 'colors'` to avoid order of operations issues.";
  }
}

@mixin set-gray($value,$color) {
  @if variable-exists(grays) {
    $grays: _set-map-color($grays,$value,$color) !global;
  } @else {
    @error "You may not use the `set-gray` mixin before setting the $grays map.  For best results, `@include 'colors'` to avoid order of operations issues.";
  }
}

// endregion ///////////////////////////////////////////// End Setters

// region //////////////////////////////////////////////   Other Color Functions

@function isLight($color, $threshold: 150) {
  @if quote($color) == "transparent" {
    @return true;
  } @else {
    $red: red($color);
    $green: green($color);
    $blue: blue($color);
    $yiq: (($red*299)+($green*587)+($blue*114))/1000;

    @return if($yiq >= $threshold, true, false);
  }
}

@function component-background($color-name: "primary") {
  $color-base: #fff;
  @return mix($color-base, theme-color($color-name), 10 * 8%);
}

@function component-border($color-name: "primary") {
  $color-base: #fff;
  @return mix($color-base, theme-color($color-name), 10 * 8%);
}

@function component-color($color-name: "primary") {
  $color-base: #000;
  @return mix($color-base, theme-color($color-name), 5 * 8%);
}

// endregion ///////////////////////////////////////////   End Other Color Functions